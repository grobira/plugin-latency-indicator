"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigurationType = exports.WebpackType = void 0;
/* eslint-disable @typescript-eslint/no-var-requires, global-require, @typescript-eslint/no-require-imports */
var env_1 = require("flex-dev-utils/dist/env");
var errors_1 = require("flex-dev-utils/dist/errors");
var fs_1 = require("flex-dev-utils/dist/fs");
var flex_plugin_webpack_1 = require("flex-plugin-webpack");
Object.defineProperty(exports, "WebpackType", { enumerable: true, get: function () { return flex_plugin_webpack_1.WebpackType; } });
var jest_config_1 = __importDefault(require("./jest.config"));
var ConfigurationType;
(function (ConfigurationType) {
    ConfigurationType["Webpack"] = "webpack";
    ConfigurationType["DevServer"] = "devServer";
    ConfigurationType["Jest"] = "jest";
})(ConfigurationType = exports.ConfigurationType || (exports.ConfigurationType = {}));
/**
 * Returns the configuration; if customer has provided a webpack.config.js, then the generated
 * config is passed to their Function for modification
 * @param name  the configuration name
 * @param env   the environment
 * @param type  the webpack type
 */
var getConfiguration = function (name, env, type) {
    if (type === void 0) { type = flex_plugin_webpack_1.WebpackType.Complete; }
    var args = {
        isProd: env === env_1.Environment.Production,
        isDev: env === env_1.Environment.Development,
        isTest: env === env_1.Environment.Test,
    };
    if (name === ConfigurationType.Webpack) {
        var config = flex_plugin_webpack_1.webpackFactory(env, type);
        if (type === flex_plugin_webpack_1.WebpackType.Static) {
            return config;
        }
        if (fs_1.checkFilesExist(fs_1.getPaths().app.webpackConfigPath)) {
            return require(fs_1.getPaths().app.webpackConfigPath)(config, args);
        }
        return config;
    }
    if (name === ConfigurationType.DevServer) {
        var config = flex_plugin_webpack_1.webpackDevFactory(type);
        if (type === flex_plugin_webpack_1.WebpackType.Static) {
            return config;
        }
        if (fs_1.checkFilesExist(fs_1.getPaths().app.devServerConfigPath)) {
            return require(fs_1.getPaths().app.devServerConfigPath)(config, args);
        }
        return config;
    }
    if (name === ConfigurationType.Jest) {
        var config = jest_config_1.default();
        if (fs_1.checkFilesExist(fs_1.getPaths().app.jestConfigPath)) {
            return require(fs_1.getPaths().app.jestConfigPath)(config, args);
        }
        return config;
    }
    throw new errors_1.FlexPluginError('Unsupported configuration name');
};
exports.default = getConfiguration;
//# sourceMappingURL=index.js.map